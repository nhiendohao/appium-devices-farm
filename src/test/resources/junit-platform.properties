junit.jupiter.execution.parallel.enabled = true


#(same_thread, same_thread) ? all tests run sequentially
#(same_thread, concurrent) ? tests from one class run sequentially, but multiple classes run in parallel
#(concurrent, same_thread) ? tests from one class run parallel, but each class run separately
#(concurrent, concurrent) ? tests run in parallel


# Configuration parameters to execute if you need a fixed thread pool:
#junit.jupiter.execution.parallel.config.strategy = fixed
#junit.jupiter.execution.parallel.config.fixed.parallelism = 2
#junit.jupiter.execution.parallel.config.fixed.max-pool-size = 2




## Configuration parameters to execute if you need a fixed thread pool:
#junit.jupiter.execution.parallel.config.strategy = dynamic
#junit.jupiter.execution.parallel.config.dynamic.max-pool-size-factor = 2

#
#
#################### WORKING ###################
#### Parallel by tests from one class run parallel, but each class run separately
#junit.jupiter.execution.parallel.config.strategy = fixed
junit.jupiter.execution.parallel.mode.default = concurrent
junit.jupiter.execution.parallel.mode.classes.default = same_thread
junit.jupiter.execution.parallel.config.strategy = custom
junit.jupiter.execution.parallel.config.custom.class = automation.example.demo.features.CustomStrategy
#################### END #######################

#### Parallel tests run in parallel
#junit.jupiter.execution.parallel.mode.default = concurrent
#junit.jupiter.execution.parallel.mode.classes.default = concurrent

### All test run sequence
#junit.jupiter.execution.parallel.mode.default = same_thread
#junit.jupiter.execution.parallel.mode.classes.default = same_thread

##### Parallel by Class, test method sequentially
#junit.jupiter.execution.parallel.mode.default = same_thread
#junit.jupiter.execution.parallel.mode.classes.default = concurrent
#junit.jupiter.execution.parallel.config.strategy = custom
#junit.jupiter.execution.parallel.config.custom.class = automation.example.demo.features.CustomStrategy
